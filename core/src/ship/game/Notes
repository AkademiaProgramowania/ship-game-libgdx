- klasa factory nic nie przechowuje tylko produkuje. Listy (kart i staków) ma mieć klasa Game
- klasę Game zrobić jako logikę biznesową z rozgrywką
- zobaczyć w internecie wzorzec factory
- gdzie umieścić metody filtrującą karty (findCard()) - w Playerze? albo Game
- przerobić createListOfShips() na pętle

- póki co w Game dwie metody wybierające karty (po typie i typie + num) możliwe że w rozgrywce nie będzie potrzebne filtrowanie z numerem karty
- przerobić na streamy (find any albo find first)

- do rozważenia klasa Config z CardFacrory factory = new CardFactory, new Game (factory.createCards...)
wtedy klasa Config dostarcza odpowiednich talii kart. Póki co jest prosta konfiuracja i może  być  Game to co jest

- v w CardFactory usunięte wielokrotne wywoływanie pola allCards, oraz pole allCards (factory nic nie przechowuje). Za to dodane lokale zmienne Listy, przechwytywane do zbioru
cards w nowej metodzie createCards. Następnie meotda createCards() wywołana w Game zamiast .getallCards (lepiej facotry mieć bezstanową, bez pierwotnego pola allCards).
- v zrobić getery do poszczególnych typów kart (gdzie je wsadzić? w Config?) póki co w CardFactory
- v zmienić nazwę klasy Game na CardFactory
- v zmniejszyć liczbę list w klasie Game (zminimalizowane przechowywanie)
