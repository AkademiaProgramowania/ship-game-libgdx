- aktualizować mastera
- dorzucić zmiany z mastera do mojego aktualnego brancha


- refactor selector arguments w metodach
- dodać w playerze last turn (i zmieniać go w rozgrywce)
- rozdzielić save od wykonywania ruchów
- przerobić createListOfShips() na pętle
- przerobić na streamy (find any albo find first)

- powt. jak robić evaluate expression przy debugowaniu

- constructor dependency injection spr
- spr wzorzec factory

Card types:
ship (6 pieces x 4 colors = 24 pcs), storm, coin, cannon.

normal card - no storm
wartość kart: 1 pkt, działo - 3pkt, burza 0pkt

- tasowanie talii - widać pierwszą kartę z talii, zakrytą, wskazanie na aktualnego gracza
- uruchomienie gry (1 gracz)
- 3 opcje: ciągnięcie karty (przycisk), kupno karty statku (przycisk), pas (przycisk)
- 1: karta (moneta, statek lub działo) po wyvciągnięciu jest dodawana do konta gracza
- 1b: gdy burza: player musi oddać 3 karty lub poświęcić działo, zmiana gracza
- 2 : kupno karty statku / gdy są 3 monety - wybór gracza, żądana karta idzie do staku, zmiana gracza
- pas - zmiana gracza

Eventy:
1. GAME_START -> controller
- wyświetlenie gry, przycisków, talii, i nazwy graczy
    - game (reakcja na GAME_START):
    - przygotowanie kart, graczy i talii,
    - tasowanie talii
    - wysłanie eventu TURN_START
2. TURN_START (który gracz) -> game
- wskazanie aktualnego gracza -> controller
- DRAW_CARD_DECISION automatycznie -> controller
- odblokowanie przycisków podejmowania decyzji (nie można pasować przed wyciągnięceim peirwszej karty)

3a. PAS_DECISION -> controller (po naciśnięciu pasowania)
- gra zmienia gracza
- powrót do pkt 2 (turn start, kolejny gracz) gra wskazuje na kolejnego gracza

3b. DRAW_CARD_DECISION -> controller (po naciśnięciu talii)
- gra:
    - zabiera wierzchnią kartę z talii i spr jaka to karta
    - jeśli to jest pierwszy statek to oznacza kolekcjonowany statek w danym graczu
    - jeśli ostatnia karta statku to GAME_END -> game
    - gra dodaje kartę do staka bieżącego gracza jeśli to nie burza
    - DRAW_CARD (card) -> game
- controller:
    - reakcja na DRAW_CARD:
        - zależnie od typu karty:
        - jeśli normalna karta - animacja przemieszczenia karty na odpowiedni stos
        - jeśli burza - przejście w stan burzy
        - stan burzy: zablokowana możliwość robirenia zwykłych akcji, zaprezentowanie burzy, umożliwienie akcji:
            - klikamy na swoje karty tak długo jak nie oddamy kart o wartości 3 pkt
            lub nie skońćzą sie karty (kliknięcie na właściwe karty ze stosu). Działo warte 3 punkty (kliki)
            - gdy wymóg zostanie spełniony, automatycznie puszczamy event PAS_DECISION
    - reakcja na GAME_END (wskazanie który gracz wygrał): menu główne/ranking/ coś inengo

3c. - gdy gracz kliknie na kartę innego gracza CARD_PURCHASE_DECISION
    controller:
        - jeśli nie masz dosć moent, nic sie nie dzieje / ew. animacja pokazująca brak monet
        - jeśłi cię stać: znikają twoje 3 monety
        - kliknięta karta trafia do odp. staka - ponownie wykorzystać metody przy DRAW_CARD
        - CARD_PURCHASE_DECISION (który gracz, która karta) -> controller
        - PAS_DECISION -> controller
    game:
        - reagowanie na CARD_PURCHASE_DECISION
        - zabranie wskazanej karty graczowi
        - zabranei 3 monet biezącemu graczowi
        - przekazanie wskazanej karty bieżącemu graczowi




